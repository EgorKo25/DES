package workers

import (
	"context"
	"fmt"
	"io"
	"log"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/valyala/fastjson"

	"github.com/stretchr/testify/require"

	"go.uber.org/zap"
)

var logger, _ = zap.NewProduction()
var sugar = logger.Sugar()

// –≠—Ö–æ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞
var (
	authorization string
	displayName   string
	resonalIds    int
)

func TestWorkerPull(t *testing.T) {
	t.Run("–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç: –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç", func(t *testing.T) {
		t.Log("–ö–ª–∏–µ–Ω–µ—Ç —Å–æ–∑–¥–∞—ë—Ç—å—Å—è —Å –¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")

		ctx := context.Background()
		channel := make(chan chan []byte)
		maxWorkers := 5
		timeOutConn := 10

		client := NewWorkerPull(ctx, channel, maxWorkers, timeOutConn, 3, sugar)

		if client == nil {
			t.Fatal("Expected a non-nil client, got nil")
		}
	})
	t.Run("–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç: –ù–µ—Ä–∞–±–æ—á–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç", func(t *testing.T) {
		t.Log("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤–µ—Ä–Ω–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω—ë–Ω")

		ctx, cancel := context.WithCancel(context.Background())
		cancel()

		channel := make(chan chan []byte)
		maxWorkers := 5
		timeOutConn := 10

		client := NewWorkerPull(ctx, channel, maxWorkers, timeOutConn, 3, sugar)
		require.Nil(t, client)
	})

	t.Log("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö –ø—Ä–∏ –ø–æ–º–æ—â–∏ —ç—Ö–æ-—Å–µ—Ä–≤–µ—Ä–∞")
	type in struct {
		resonalId     int
		authorization string
		channel       chan chan []byte
		// UserDate
		email    string
		dateTo   string
		dateFrom string
	}

	type want struct {
		status      string
		email       string
		id          int
		displayName string
	}
	tests := []struct {
		name string
		want want
		in   in
	}{
		{
			name: "Simple positive test case",
			want: want{
				status:      `"OK"`,
				email:       `"petrovich@mail.ru"`,
				id:          1234,
				displayName: `"–ò–≤–∞–Ω–æ–≤ –°–µ–º–µ–Ω –ü–µ—Ç—Ä–æ–≤–∏—áüé©"`,
			},
			in: in{
				resonalId: 9,

				email:    "petrovich@mail.ru",
				dateFrom: "10.20.30",
				dateTo:   "1/2/3",
			},
		},
	}
	//–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É–ª–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤
	channel := make(chan chan []byte, 6)
	maxWorkers := 3
	timeOutConn := 0
	server := NewTestServer()
	defer server.Close()
	ctx, cancel := context.WithCancel(context.Background())

	for i, tt := range tests {
		t.Run(fmt.Sprintf("test ‚Ññ%d - %s", i, tt.name), func(t *testing.T) {

			resonalIds = tt.in.resonalId

			client := NewWorkerPull(ctx, channel, maxWorkers, timeOutConn, 3, sugar)
			require.NotNilf(t, client, "worker pull is nil!")

			client.urlExtData = server.URL + "/Portal/springApi/api/employees"
			client.urlStatusAbv = server.URL + "/Portal/springApi/api/absences"

			resultChan := make(chan []byte)
			channel <- resultChan

			resultChan <- []byte(fmt.Sprintf(`{"email":"%s", "dateTo":"%s", "dateFrom":"%s"}`, tt.in.email, tt.in.dateTo, tt.in.dateFrom))

			v := fastjson.MustParseBytes(<-resultChan)
			close(resultChan)
			cancel()

			log.Println(v.String())
			require.Equal(t, tt.want.status, v.Get("status").String())
			require.Equal(t, tt.want.id, v.GetInt("id"))
			require.Equal(t, tt.want.email, v.Get("email").String())
			require.Equal(t, tt.want.displayName, v.Get("displayName").String())
		})
	}

}

// NewTestServer –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç—Ö–æ-—Å–µ—Ä–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤
func NewTestServer() *httptest.Server {
	mux := http.NewServeMux()

	mux.HandleFunc("/Portal/springApi/api/absences", func(w http.ResponseWriter, r *http.Request) {

		auth := r.Header.Get("Authorization")

		if auth != authorization {
			w.WriteHeader(http.StatusUnauthorized)
			return
		}

		body, err := io.ReadAll(r.Body)
		if err != nil {
			w.WriteHeader(http.StatusBadRequest)
			return
		}

		//TODO:
		v, err := fastjson.ParseBytes(body)
		if err != nil {
			w.WriteHeader(http.StatusBadRequest)
			return
		}

		w.WriteHeader(http.StatusOK)
		answ := fmt.Sprintf(`{
						"status": "OK",
						"data": [
						{
							"id":1234,
							"personId":%s,
							"createdDate":"20.20.20",
							"dateFrom":%s,
							"dateTo":%s,
							"reasonId":%d
						}
					]}`, v.Get("personalIds").String(), v.Get("dateFrom").String(), v.Get("dateTo").String(), resonalIds)
		w.Write([]byte(answ))
	})
	mux.HandleFunc("/Portal/springApi/api/employees", func(w http.ResponseWriter, r *http.Request) {

		auth := r.Header.Get("Authorization")

		if auth != authorization {
			w.WriteHeader(http.StatusUnauthorized)
			return
		}

		body, err := io.ReadAll(r.Body)
		if err != nil {
			w.WriteHeader(http.StatusBadRequest)
			return
		}

		v, err := fastjson.ParseBytes(body)
		if err != nil {
			w.WriteHeader(http.StatusBadRequest)
			return
		}

		w.WriteHeader(http.StatusOK)
		answ := fmt.Sprintf(`{"status":"OK",
					"data":[
								{"id":1234,
								"displayName":"–ò–≤–∞–Ω–æ–≤ –°–µ–º–µ–Ω –ü–µ—Ç—Ä–æ–≤–∏—á",
								"email":"petrovich@mail.ru",
								"email":%s,
								"workPhone":"1234"}
							]}`, v.Get("email"))
		w.Write([]byte(answ))
	})

	server := httptest.NewServer(mux)
	return server
}
